{"ast":null,"code":"import CryptoJS from \"crypto-js\";\nconst KEY = process.env.REACT_APP_ENCRYPTION_KEY;\n\n/**\n * function to check if user is logged in or not\n */\nconst checkLogin = () => {\n  if (localStorage.authData) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * function to get user access token\n */\n// const getAccessToken = (): boolean | string => {\n//   try {\n//     const data = localStorage.authData;\n\n//     if (data) {\n//       const bytes = CryptoJS.AES.decrypt(data.toString(), KEY);\n//       const decryptedData: UserData = JSON.parse(\n//         bytes.toString(CryptoJS.enc.Utf8)\n//       );\n//       return decryptedData && decryptedData.token ? decryptedData.token : false;\n//     } else {\n//       return false;\n//     }\n//   } catch (e) {\n//     return false;\n//   }\n// };\n\n/**\n * function to get user data\n */\n// const getUserData = (): UserProfileResponse => {\n//   const data = localStorage.userData;\n//   if (data) {\n//     const bytes = CryptoJS.AES.decrypt(data.toString(), KEY);\n//     const decryptedData: UserProfileResponse = JSON.parse(\n//       bytes.toString(CryptoJS.enc.Utf8)\n//     );\n//     if (!decryptedData) {\n//       return {} as UserProfileResponse;\n//     }\n//     return decryptedData;\n//   } else {\n//     return {} as UserProfileResponse;\n//   }\n// };\n\n/**\n * function to set user authentication data\n */\n// const setAuthData = (data: UserData): void => {\n//   const cipherText = CryptoJS.AES.encrypt(JSON.stringify(data), KEY);\n//   localStorage.setItem(\"authData\", cipherText.toString());\n// };\n\n/**\n * function to set user organizationData data\n */\nconst setSelectedOrg = data => {\n  localStorage.setItem(\"selectedOrg\", JSON.stringify(data));\n};\n\n/**\n * function to get user organizationData data\n */\nconst getSelectedOrg = () => {\n  const selectedOrg = localStorage.getItem(\"selectedOrg\");\n  if (selectedOrg === \"undefined\") {\n    return null;\n  }\n  return selectedOrg ? JSON.parse(selectedOrg) : null;\n};\n\n/**\n * function to set user authentication data\n */\nconst setUserData = data => {\n  const cipherText = CryptoJS.AES.encrypt(JSON.stringify(data), KEY);\n  localStorage.setItem(\"userData\", cipherText.toString());\n};\n\n/**\n * function to get user authentication data\n */\nconst getAuthData = () => {\n  const data = localStorage.authData;\n  if (data) {\n    const bytes = CryptoJS.AES.decrypt(data.toString(), KEY);\n    const decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  } else {\n    return;\n  }\n};\n\n/**\n * function to remove user authentication data\n */\nconst removeAuthData = () => {\n  localStorage.removeItem(\"authData\");\n};\n\n/**\n * function to get Organization token\n */\n// const getOrg = () => {\n// \ttry {\n// \t\tconst data = localStorage.authData;\n\n// \t\tif (data) {\n// \t\t\tconst bytes = CryptoJS.AES.decrypt(data.toString(), KEY);\n// \t\t\tconst decryptedData: UserData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n// \t\t\treturn decryptedData && decryptedData.user.organizations ? decryptedData.user.organizations : [];\n// \t\t} else {\n// \t\t\treturn [];\n// \t\t}\n// \t} catch (e) {\n// \t\treturn [];\n// \t}\n// };\n\nconst authService = {\n  checkLogin: checkLogin,\n  getAccessToken: getAccessToken,\n  getUserData: getUserData,\n  setAuthData: setAuthData,\n  getAuthData: getAuthData,\n  removeAuthData: removeAuthData,\n  setUserData: setUserData,\n  setSelectedOrg: setSelectedOrg,\n  getSelectedOrg: getSelectedOrg\n  //   getOrg: getOrg,\n};\n\nexport default authService;","map":{"version":3,"names":["CryptoJS","KEY","process","env","REACT_APP_ENCRYPTION_KEY","checkLogin","localStorage","authData","setSelectedOrg","data","setItem","JSON","stringify","getSelectedOrg","selectedOrg","getItem","parse","setUserData","cipherText","AES","encrypt","toString","getAuthData","bytes","decrypt","decryptedData","enc","Utf8","removeAuthData","removeItem","authService","getAccessToken","getUserData","setAuthData"],"sources":["/home/khushbu/workspace/scrum-master-v2/src/shared/services/auth.service.ts"],"sourcesContent":["import CryptoJS from \"crypto-js\";\n\nconst KEY: string = process.env.REACT_APP_ENCRYPTION_KEY as string;\n\n/**\n * function to check if user is logged in or not\n */\nconst checkLogin = (): boolean => {\n  if (localStorage.authData) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * function to get user access token\n */\n// const getAccessToken = (): boolean | string => {\n//   try {\n//     const data = localStorage.authData;\n\n//     if (data) {\n//       const bytes = CryptoJS.AES.decrypt(data.toString(), KEY);\n//       const decryptedData: UserData = JSON.parse(\n//         bytes.toString(CryptoJS.enc.Utf8)\n//       );\n//       return decryptedData && decryptedData.token ? decryptedData.token : false;\n//     } else {\n//       return false;\n//     }\n//   } catch (e) {\n//     return false;\n//   }\n// };\n\n/**\n * function to get user data\n */\n// const getUserData = (): UserProfileResponse => {\n//   const data = localStorage.userData;\n//   if (data) {\n//     const bytes = CryptoJS.AES.decrypt(data.toString(), KEY);\n//     const decryptedData: UserProfileResponse = JSON.parse(\n//       bytes.toString(CryptoJS.enc.Utf8)\n//     );\n//     if (!decryptedData) {\n//       return {} as UserProfileResponse;\n//     }\n//     return decryptedData;\n//   } else {\n//     return {} as UserProfileResponse;\n//   }\n// };\n\n/**\n * function to set user authentication data\n */\n// const setAuthData = (data: UserData): void => {\n//   const cipherText = CryptoJS.AES.encrypt(JSON.stringify(data), KEY);\n//   localStorage.setItem(\"authData\", cipherText.toString());\n// };\n\n/**\n * function to set user organizationData data\n */\nconst setSelectedOrg = (\n  data: { label: string; value: string } | null\n): void => {\n  localStorage.setItem(\"selectedOrg\", JSON.stringify(data));\n};\n\n/**\n * function to get user organizationData data\n */\nconst getSelectedOrg = (): { label: string; value: string } | null => {\n  const selectedOrg = localStorage.getItem(\"selectedOrg\");\n  if (selectedOrg === \"undefined\") {\n    return null;\n  }\n  return selectedOrg ? JSON.parse(selectedOrg) : null;\n};\n\n/**\n * function to set user authentication data\n */\nconst setUserData = (data: UserProfileResponse): void => {\n  const cipherText = CryptoJS.AES.encrypt(JSON.stringify(data), KEY);\n  localStorage.setItem(\"userData\", cipherText.toString());\n};\n\n/**\n * function to get user authentication data\n */\nconst getAuthData = (): UserData | undefined => {\n  const data = localStorage.authData;\n\n  if (data) {\n    const bytes = CryptoJS.AES.decrypt(data.toString(), KEY);\n    const decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  } else {\n    return;\n  }\n};\n\n/**\n * function to remove user authentication data\n */\nconst removeAuthData = (): void => {\n  localStorage.removeItem(\"authData\");\n};\n\n/**\n * function to get Organization token\n */\n// const getOrg = () => {\n// \ttry {\n// \t\tconst data = localStorage.authData;\n\n// \t\tif (data) {\n// \t\t\tconst bytes = CryptoJS.AES.decrypt(data.toString(), KEY);\n// \t\t\tconst decryptedData: UserData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n// \t\t\treturn decryptedData && decryptedData.user.organizations ? decryptedData.user.organizations : [];\n// \t\t} else {\n// \t\t\treturn [];\n// \t\t}\n// \t} catch (e) {\n// \t\treturn [];\n// \t}\n// };\n\nconst authService = {\n  checkLogin: checkLogin,\n  getAccessToken: getAccessToken,\n  getUserData: getUserData,\n  setAuthData: setAuthData,\n  getAuthData: getAuthData,\n  removeAuthData: removeAuthData,\n  setUserData: setUserData,\n  setSelectedOrg: setSelectedOrg,\n  getSelectedOrg: getSelectedOrg,\n  //   getOrg: getOrg,\n};\n\nexport default authService;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;AAEhC,MAAMC,GAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAkC;;AAElE;AACA;AACA;AACA,MAAMC,UAAU,GAAGA,CAAA,KAAe;EAChC,IAAIC,YAAY,CAACC,QAAQ,EAAE;IACzB,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,cAAc,GAClBC,IAA6C,IACpC;EACTH,YAAY,CAACI,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC;AAC3D,CAAC;;AAED;AACA;AACA;AACA,MAAMI,cAAc,GAAGA,CAAA,KAA+C;EACpE,MAAMC,WAAW,GAAGR,YAAY,CAACS,OAAO,CAAC,aAAa,CAAC;EACvD,IAAID,WAAW,KAAK,WAAW,EAAE;IAC/B,OAAO,IAAI;EACb;EACA,OAAOA,WAAW,GAAGH,IAAI,CAACK,KAAK,CAACF,WAAW,CAAC,GAAG,IAAI;AACrD,CAAC;;AAED;AACA;AACA;AACA,MAAMG,WAAW,GAAIR,IAAyB,IAAW;EACvD,MAAMS,UAAU,GAAGlB,QAAQ,CAACmB,GAAG,CAACC,OAAO,CAACT,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,EAAER,GAAG,CAAC;EAClEK,YAAY,CAACI,OAAO,CAAC,UAAU,EAAEQ,UAAU,CAACG,QAAQ,CAAC,CAAC,CAAC;AACzD,CAAC;;AAED;AACA;AACA;AACA,MAAMC,WAAW,GAAGA,CAAA,KAA4B;EAC9C,MAAMb,IAAI,GAAGH,YAAY,CAACC,QAAQ;EAElC,IAAIE,IAAI,EAAE;IACR,MAAMc,KAAK,GAAGvB,QAAQ,CAACmB,GAAG,CAACK,OAAO,CAACf,IAAI,CAACY,QAAQ,CAAC,CAAC,EAAEpB,GAAG,CAAC;IACxD,MAAMwB,aAAa,GAAGd,IAAI,CAACK,KAAK,CAACO,KAAK,CAACF,QAAQ,CAACrB,QAAQ,CAAC0B,GAAG,CAACC,IAAI,CAAC,CAAC;IACnE,OAAOF,aAAa;EACtB,CAAC,MAAM;IACL;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA,MAAMG,cAAc,GAAGA,CAAA,KAAY;EACjCtB,YAAY,CAACuB,UAAU,CAAC,UAAU,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG;EAClBzB,UAAU,EAAEA,UAAU;EACtB0B,cAAc,EAAEA,cAAc;EAC9BC,WAAW,EAAEA,WAAW;EACxBC,WAAW,EAAEA,WAAW;EACxBX,WAAW,EAAEA,WAAW;EACxBM,cAAc,EAAEA,cAAc;EAC9BX,WAAW,EAAEA,WAAW;EACxBT,cAAc,EAAEA,cAAc;EAC9BK,cAAc,EAAEA;EAChB;AACF,CAAC;;AAED,eAAeiB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}