{"ast":null,"code":"import { useUncontrolled } from '@mantine/hooks';\nimport { useRef } from 'react';\nconst getEmptyValue = type => type === \"range\" ? [null, null] : type === \"multiple\" ? [] : null;\nfunction useUncontrolledDates({\n  type,\n  value,\n  defaultValue,\n  onChange\n}) {\n  const storedType = useRef(type);\n  const [_value, _setValue] = useUncontrolled({\n    value,\n    defaultValue,\n    onChange,\n    finalValue: getEmptyValue(type)\n  });\n  let _finalValue = _value;\n  if (storedType.current !== type) {\n    storedType.current = type;\n    if (value === void 0) {\n      _finalValue = defaultValue !== void 0 ? defaultValue : getEmptyValue(type);\n      _setValue(_finalValue);\n    } else if (process.env.NODE_ENV === \"development\") {\n      switch (type) {\n        case \"default\":\n          if (value !== null && typeof value !== \"string\") {\n            console.error(\"[@mantine/dates/use-uncontrolled-dates] Value must be type of `null` or `string`\");\n          }\n          break;\n        case \"multiple\":\n          if (!(value instanceof Array)) {\n            console.error(\"[@mantine/dates/use-uncontrolled-dates] Value must be type of `string[]`\");\n          }\n          break;\n        case \"range\":\n          if (!(value instanceof Array) || value.length !== 2) {\n            console.error(\"[@mantine/dates/use-uncontrolled-dates] Value must be type of `[string, string]`\");\n          }\n          break;\n      }\n    }\n  }\n  return [_finalValue, _setValue];\n}\nexport { useUncontrolledDates };","map":{"version":3,"names":["getEmptyValue","type","useUncontrolledDates","value","defaultValue","onChange","storedType","useRef","_value","_setValue","useUncontrolled","finalValue","_finalValue","current","process","env","NODE_ENV","console","error","Array","length"],"sources":["/home/khushbu/workspace/scrum-master-v2/node_modules/@mantine/dates/src/hooks/use-uncontrolled-dates/use-uncontrolled-dates.ts"],"sourcesContent":["import { useUncontrolled } from '@mantine/hooks';\nimport { useRef } from 'react';\nimport { DatePickerType, DatePickerValue } from '../../types';\n\ninterface UseUncontrolledDates<Type extends DatePickerType = 'default'> {\n  type: Type;\n  value: DatePickerValue<Type>;\n  defaultValue: DatePickerValue<Type>;\n  onChange(value: DatePickerValue<Type>): void;\n}\n\nconst getEmptyValue = <Type extends DatePickerType = 'default'>(type: Type) =>\n  type === 'range' ? [null, null] : type === 'multiple' ? [] : null;\n\nexport function useUncontrolledDates<Type extends DatePickerType = 'default'>({\n  type,\n  value,\n  defaultValue,\n  onChange,\n}: UseUncontrolledDates<Type>) {\n  const storedType = useRef<Type>(type);\n  const [_value, _setValue] = useUncontrolled<any>({\n    value,\n    defaultValue,\n    onChange,\n    finalValue: getEmptyValue(type),\n  });\n\n  let _finalValue = _value;\n\n  if (storedType.current !== type) {\n    // Type has changed. Do some checks or resets\n\n    storedType.current = type;\n    if (value === undefined) {\n      // Reset uncontrolled value as types aren't compatible\n      _finalValue = defaultValue !== undefined ? defaultValue : getEmptyValue(type);\n      _setValue(_finalValue);\n    } else if (process.env.NODE_ENV === 'development') {\n      // Throw errors in dev mode in case type of value isn't correct\n      switch (type) {\n        case 'default':\n          if (value !== null && typeof value !== 'string') {\n            // eslint-disable-next-line no-console\n            console.error(\n              '[@mantine/dates/use-uncontrolled-dates] Value must be type of `null` or `string`'\n            );\n          }\n          break;\n        case 'multiple':\n          if (!(value instanceof Array)) {\n            // eslint-disable-next-line no-console\n            console.error(\n              '[@mantine/dates/use-uncontrolled-dates] Value must be type of `string[]`'\n            );\n          }\n          break;\n        case 'range':\n          if (!(value instanceof Array) || value.length !== 2) {\n            // eslint-disable-next-line no-console\n            console.error(\n              '[@mantine/dates/use-uncontrolled-dates] Value must be type of `[string, string]`'\n            );\n          }\n          break;\n      }\n    }\n  }\n\n  return [_finalValue, _setValue];\n}\n"],"mappings":";;AAEA,MAAMA,aAAa,GAAIC,IAAI,IAAKA,IAAI,KAAK,OAAO,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,GAAGA,IAAI,KAAK,UAAU,GAAG,EAAE,GAAG,IAAI;AAC1F,SAASC,oBAAoBA,CAAC;EACnCD,IAAI;EACJE,KAAK;EACLC,YAAY;EACZC;AACF,CAAC,EAAE;EACD,MAAMC,UAAU,GAAGC,MAAM,CAACN,IAAI,CAAC;EAC/B,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGC,eAAe,CAAC;IAC1CP,KAAK;IACLC,YAAY;IACZC,QAAQ;IACRM,UAAU,EAAEX,aAAa,CAACC,IAAI;EAClC,CAAG,CAAC;EACF,IAAIW,WAAW,GAAGJ,MAAM;EACxB,IAAIF,UAAU,CAACO,OAAO,KAAKZ,IAAI,EAAE;IAC/BK,UAAU,CAACO,OAAO,GAAGZ,IAAI;IACzB,IAAIE,KAAK,KAAK,KAAK,CAAC,EAAE;MACpBS,WAAW,GAAGR,YAAY,KAAK,KAAK,CAAC,GAAGA,YAAY,GAAGJ,aAAa,CAACC,IAAI,CAAC;MAC1EQ,SAAS,CAACG,WAAW,CAAC;IAC5B,CAAK,MAAM,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MACjD,QAAQf,IAAI;QACV,KAAK,SAAS;UACZ,IAAIE,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;YAC/Cc,OAAO,CAACC,KAAK,CAAC,kFAAkF,CAAC;UAC7G;UACU;QACF,KAAK,UAAU;UACb,IAAI,EAAEf,KAAK,YAAYgB,KAAK,CAAC,EAAE;YAC7BF,OAAO,CAACC,KAAK,CAAC,0EAA0E,CAAC;UACrG;UACU;QACF,KAAK,OAAO;UACV,IAAI,EAAEf,KAAK,YAAYgB,KAAK,CAAC,IAAIhB,KAAK,CAACiB,MAAM,KAAK,CAAC,EAAE;YACnDH,OAAO,CAACC,KAAK,CAAC,kFAAkF,CAAC;UAC7G;UACU;MACV;IACA;EACA;EACE,OAAO,CAACN,WAAW,EAAEH,SAAS,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}