{"ast":null,"code":"const loadingReducer = (state = {\n  api: {}\n}, action) => {\n  const {\n    type\n  } = action;\n  const matches = /(.*)_(INIT|SUCCESS|FAIL)/.exec(type);\n\n  // not a *INIT / *_SUCCESS /  *_FAIL actions, so we ignore them\n  if (!matches) return state;\n  const [, requestName, requestState] = matches;\n  return {\n    ...state,\n    // Store whether a request is happening at the moment or not\n    // e.g. will be true when receiving FETCH_GAME_INIT\n    //      and false when receiving FETCH_GAME_SUCCESS / FETCH_GAME_FAIL\n    api: {\n      ...state.api,\n      [requestName]: requestState === 'INIT'\n    }\n  };\n};\nexport default loadingReducer;","map":{"version":3,"names":["loadingReducer","state","api","action","type","matches","exec","requestName","requestState"],"sources":["/home/khushbu/workspace/scrum-master-v2/src/store/loadingReducer.ts"],"sourcesContent":["import { LoadingState, Action } from 'shared/interface';\n\nconst loadingReducer = (state: LoadingState = { api: {} }, action: Action): LoadingState => {\n    const { type } = action;\n    const matches = /(.*)_(INIT|SUCCESS|FAIL)/.exec(type);\n\n    // not a *INIT / *_SUCCESS /  *_FAIL actions, so we ignore them\n    if (!matches) return state;\n\n    const [, requestName, requestState] = matches;\n    return {\n        ...state,\n        // Store whether a request is happening at the moment or not\n        // e.g. will be true when receiving FETCH_GAME_INIT\n        //      and false when receiving FETCH_GAME_SUCCESS / FETCH_GAME_FAIL\n        api: {\n            ...state.api,\n            [requestName]: requestState === 'INIT',\n        },\n    };\n};\n\nexport default loadingReducer;\n"],"mappings":"AAEA,MAAMA,cAAc,GAAGA,CAACC,KAAmB,GAAG;EAAEC,GAAG,EAAE,CAAC;AAAE,CAAC,EAAEC,MAAc,KAAmB;EACxF,MAAM;IAAEC;EAAK,CAAC,GAAGD,MAAM;EACvB,MAAME,OAAO,GAAG,0BAA0B,CAACC,IAAI,CAACF,IAAI,CAAC;;EAErD;EACA,IAAI,CAACC,OAAO,EAAE,OAAOJ,KAAK;EAE1B,MAAM,GAAGM,WAAW,EAAEC,YAAY,CAAC,GAAGH,OAAO;EAC7C,OAAO;IACH,GAAGJ,KAAK;IACR;IACA;IACA;IACAC,GAAG,EAAE;MACD,GAAGD,KAAK,CAACC,GAAG;MACZ,CAACK,WAAW,GAAGC,YAAY,KAAK;IACpC;EACJ,CAAC;AACL,CAAC;AAED,eAAeR,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}