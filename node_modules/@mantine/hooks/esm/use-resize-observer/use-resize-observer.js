import { useRef, useState, useMemo, useCallback } from 'react';

const defaultState = {
  x: 0,
  y: 0,
  width: 0,
  height: 0,
  top: 0,
  left: 0,
  bottom: 0,
  right: 0
};
function useResizeObserver() {
  const frameID = useRef(0);
  const [rect, setRect] = useState(defaultState);
  const observer = useMemo(() => typeof window !== "undefined" ? new ResizeObserver((entries) => {
    const entry = entries[0];
    if (entry) {
      cancelAnimationFrame(frameID.current);
      frameID.current = requestAnimationFrame(() => {
        setRect(entry.contentRect);
      });
    }
  }) : null, []);
  const cleanup = useRef();
  const ref = useCallback((node) => {
    if (cleanup.current) {
      cleanup.current();
      cleanup.current = void 0;
    }
    if (node) {
      setRect(node.getBoundingClientRect());
      if (observer) {
        observer.observe(node);
        cleanup.current = () => {
          observer.disconnect();
          if (frameID.current) {
            cancelAnimationFrame(frameID.current);
          }
        };
      }
    }
  }, [observer]);
  return [ref, rect];
}
function useElementSize() {
  const [ref, { width, height }] = useResizeObserver();
  return { ref, width, height };
}

export { useElementSize, useResizeObserver };
//# sourceMappingURL=use-resize-observer.js.map
